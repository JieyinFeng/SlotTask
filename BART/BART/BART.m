%% BART% run like:%  BART('SubjID','50',0)%% 1. show a ballon (neutral=white or reward=green) % 2. chose to inflate or checkout (only inflate till full for nuetral)%% scanner trigger, "6^", starts paradigm% accepts '1!' as go, '2^' as checkout% 'ESCAPE' quits%%% Modified by Veena Narayan%%% Modified by Will Foran (20140317) - dont use KbQueue%% setting up stuff (standard to all programs)function BART(subject_initials,run_number,cumulative_ctr)    % clear all -GLOBAL;    % clear mex;    % close all;    KbName('UnifyKeyNames')    Screen('Preference', 'VisualDebugLevel', 0);    script_name='BART';    script_version='7';    revision_date='011-07-07';    % SET TO ZERO TO TAKE KEYPRESSES!    timetest=0;    % seed randomness    rand('state',sum(100*clock));    fprintf('%s %s (revised %s)\n',script_name,script_version, ...            revision_date);    fprintf('subject %s run %s start @ %d pts\n',subject_initials,run_number,cumulative_ctr)    MRI=0;    pixelSize =32;        grayLevel=120;    %[w, screenRect] = Screen('OpenWindow', max(Screen('Screens')),[grayLevel grayLevel grayLevel ], [0 0 800 600] );    [w, screenRect] = Screen('OpenWindow', max(Screen('Screens')),[grayLevel grayLevel grayLevel ],[] );        Screen('FillRect', w, grayLevel);    Screen('Flip', w);    HideCursor;    black=BlackIndex(w); % Should equal 0.    white=WhiteIndex(w); % Should equal 255.    % set up screen positions for stimuli    xcenter=screenRect(3)/2;    ycenter=screenRect(4)/2;    textsize=50;    %Screen('TextSize',w,textsize);    stim_images=cell(1,3);    % load the balloon    for x=1:3,        balloon_img{x}=imread(sprintf('balloon%d.jpg',x),'jpeg');    end;    % load the balloon    for x=1:3,        exploded_img{x}=imread(sprintf('balloon%d_exploded.jpg',x),'jpeg');    end;    % setup values for reward/punishment    %starting_value=0.00;    max_scan_length=510;    % set up windows for balloon    nsizes=16;  % 10 possible balloon sizes    base_window_size=[150 150];    scale_factor=0.15; %changed from 0.10 - seeems to be ok and makes for a bigger balloon    for x=1:nsizes,        tmp=base_window_size + base_window_size*(x-1)*scale_factor;        imgwindow{x}=round([[xcenter ycenter] - tmp/2 [xcenter ycenter] + tmp/2 ]);    end;    %%% start defining your trial    FlushEvents('keyDown');    %cumulative_ctr=0;    % set up the design    nconds=3;  % changed for this version - 1 color ballon + 1 control    control_cond=3;    explode_trial_dist=[12 12 12];  % max # of trials before explosion (twice mean exploding time)    payoff_level=[5 5 0];    explode_trial_num=[16 16 16];  % includes control trials for behavioral piloting    ntrials=sum(explode_trial_num);    rt=zeros(ntrials,nsizes,3);    resp=cell(ntrials,nsizes);    total_pres_time=zeros(1,ntrials);    ctr=1;    for c=1:nconds,        for t=1:explode_trial_num(c),            trial_info(ctr).explode_trial=ceil(rand*explode_trial_dist(c));            trial_info(ctr).payoff_level=payoff_level(c);            trial_info(ctr).balloon=c;            trial_info(ctr).rt=[];            trial_info(ctr).resp={};            trial_info(ctr).explode_time=[];            trial_info(ctr).finish_time=[];            trial_info(ctr).exploded=0;            trial_info(ctr).trial_total=[];            trial_info(ctr).cumulative_total=[];            trial_info(ctr).finished=0;            ctr=ctr+1;        end;    end;    % randomize list    randidx=randperm(ntrials);    trial_info=trial_info(randidx);    accept_resp=KbName('1!'); %blue    reject_resp=KbName('2@'); %yellow    ISI=3;    ITI=2;    min_iti=1;    max_iti=12;    mean_iti=4;    isi_window=2;    accept_wait=2;    %break_trials=[30 60 90];    balloon_num=ones(1,ntrials);    FlushEvents('keyDown');	 % clear any keypresses out of the buffer    % how screen() works:    % first argument: which screen to use (in this case, w, which is the main screen)    % second argument: what to do (in this case, 'DrawText')    % subsequent arguments depend upon what you've chosen to do    %exp_screen=max(Screen('Screens')); %get screen numbers of which max is used for the initial OpenWindow command.       %windowptr = Screen('OpenWindow',exp_screen); %opens the screen- I used only a single buffer cause I don't know why two buffers helps    KbName('UnifyKeyNames')    %windowptr = Screen('OpenWindow', max(Screen('Screens')),[], [0 0 800 600] );        Screen('TextSize', w, 20); %Set textsize        Screen('TextFont',w, 'Arial'); %Set text font        Screen('TextColor',w,254); %Set text color        Screen('FillRect',w,0); %sets background color to black        Screen('DrawText', w, 'Press the FIRST button to inflate the balloon.', 50, 50);        Screen('DrawText', w, 'Press the SECOND button to stop inflating and move onto the next balloon.', 50, 100);        Screen('DrawText', w, 'If the balloon explodes, you will get no points.', 50, 150);        Screen('DrawText', w, 'Green balloons give points, but white do not.', 50, 200);        Screen('DrawText', w, 'When you see a white balloon, inflate it until it goes away to move on.', 50, 250);        Screen('DrawText', w, 'Try to get as many points as you can!', 50, 350);    Screen ('Flip', w);    % go back to gray color    Screen('FillRect', w, grayLevel);    %Setting up devices    % If in scanner, FORP is one of the devices, otherwise FORP_ID is set to    % -1, so we can run the task with just the keboard        psychtoolbox_forp_id=-1;        vendorIDs = [1240 6171];        Devices = PsychHID('Devices');        numDevices=PsychHID('NumDevices');        %Loop through all KEYBOARD devices with the vendorID of FORP's vendor if in the scanner:        if MRI==1,         for i=1:size(Devices,2)            if strcmp(Devices(i).usageName,'Keyboard') & ismember(Devices(i).vendorID, vendorIDs)                psychtoolbox_forp_id=i;                break;            end;         end;            if psychtoolbox_forp_id==-1;            error('No FORP-Device detected on your system');            end;        else            psychtoolbox_forp_id=-1;        end;    % write trial-by-trial data to a text logfile    d=clock;    logfile=sprintf('sub%s_scan%s_bart.log',subject_initials,run_number);    fprintf('A log of this session will be saved to %s\n',logfile);    fid=fopen(logfile,'a');    if fid<1,        error('could not open logfile!');    end;    fprintf(fid,'Started: %s %2.0f:%02.0f\n',date,d(4),d(5));    WaitSecs(1);        %%%%%%%%%%%%%%%%%%%%%%        %%%KbQueueRelease()        %%%KbQueueFlush()        %%%ListenChar(0)        StartOfRunTime = waitForResponse('6^');        %WaitSecs(4);        Screen ('Flip', w);            anchor=GetSecs;    % present trials    for trial=1:ntrials,        trial        trial_start_time=GetSecs;        if trial_start_time - anchor > max_scan_length,            break;        end;        still_playing=1;        trial_round=1;        trial_counter=0;        while still_playing,                 Screen('PutImage',w,balloon_img{trial_info(trial).balloon},imgwindow{trial_round});            %start_time=GetSecs;            %trial_info(trial).rt(trial_round,1)=start_time-anchor;  %collect absolute start time            if trial_info(trial).balloon ~= control_cond,                Screen('TextSize', w, 40)                %screen('DrawText',w,sprintf('%5.f',trial_counter),xcenter-75,ycenter-40,white);            end;                        [VBLTimestamp StimulusOnsetTime FlipTimestamp Missed Beampos] =Screen('Flip',w)            trial_info(trial).rt(trial_round,1)=StimulusOnsetTime - anchor;            %Screen ('Flip', w);            no_resp=1;            while no_resp,                [ pressed, seconds, firstPress ] = KbCheck;                if pressed & no_resp,                    key=find(firstPress);                    if(length(key)>1)                        key                        key=key(1); % incase we hit two?                    end                    if(any(key == [ accept_resp reject_resp]))                        tmp=key;                        trial_info(trial).rt(trial_round,2)=tmp-StimulusOnsetTime;  %collect rt for each trial                        trial_info(trial).rt(trial_round,3)=tmp-anchor; %actual time subject makes a key press                        no_resp=0;                        trial_info(trial).resp{trial_round}=find(firstPress); %collect response                    elseif (key==KbName('ESCAPE'))                        msgAndCloseEverything('early quit');                        error('early quit\n')                    end                    %trial_info(trial).resp{trial_round}= trial_info(trial).rt(trial_round,3);                 end;                d=clock;                outfile=sprintf('%s_r%s_%s.mat',subject_initials,run_number,date);                run_info.initials=subject_initials;                run_info.date=date;                run_info.outfile=outfile;	              end;                                    % determine accept/reject            if trial_info(trial).resp{trial_round}==accept_resp,                accept=1;            else,                accept=0;            end;                        if trial_info(trial).balloon==control_cond,                tmp_isi=1 + rand*isi_window;                %waitsecs(tmp_isi);                if trial_round < trial_info(trial).explode_trial                      Screen('Flip', w)                   WaitSecs(tmp_isi);	                elseif trial_round >= trial_info(trial).explode_trial,                    still_playing=0;                    tmp_isi=1 + rand*isi_window;                    WaitSecs(tmp_isi);                    trial_info(trial).exploded=1;                    Screen('PutImage',w,balloon_img{trial_info(trial).balloon},imgwindow{trial_round})                    Screen('DrawText',w,sprintf('Total:%5.f',cumulative_ctr),xcenter-150,ycenter+200,black);                    [VBLTimestamp StimulusOnsetTime FlipTimestamp Missed Beampos] = Screen('Flip',w)                    trial_info(trial).explode_time=StimulusOnsetTime - anchor;                    %trial_info(trial).explode_time=GetSecs-anchor;                    %Screen ('Flip', w);                    WaitSecs(ITI);				                end;				                trial_round=trial_round+1;            elseif accept==0,                % add total to cumulative counter                trial_info(trial).finish_time=GetSecs-anchor;                cumulative_ctr=cumulative_ctr+trial_counter;                still_playing=0;                Screen('PutImage',w,balloon_img{trial_info(trial).balloon},imgwindow{trial_round});                %Screen('DrawText',w,sprintf('This Balloon: %5.f',trial_counter),xcenter-270,ycenter+150,black);                Screen('DrawText',w,sprintf('Total:%5.f',cumulative_ctr),xcenter-150,ycenter+200,black);                Screen('Flip', w)                WaitSecs(accept_wait);				                trial_info(trial).trial_total=trial_counter;                trial_info(trial).cumulative_total=cumulative_ctr;                Screen('Flip', w);            elseif accept==1,                % is it an explosion trial?                if trial_round >= trial_info(trial).explode_trial,                    % explode                    Screen ('Flip', w);                    tmp_isi=1 + rand*isi_window;                    WaitSecs(tmp_isi);                    trial_info(trial).exploded=1;                    Screen('PutImage',w,exploded_img{trial_info(trial).balloon},imgwindow{trial_round});                    Screen(w,'DrawText',sprintf('Total:%5.f',cumulative_ctr),xcenter-150,ycenter+200,black);                    [VBLTimestamp StimulusOnsetTime FlipTimestamp Missed Beampos] = Screen('Flip',w)                    trial_info(trial).explode_time=StimulusOnsetTime - anchor;                    %Screen('Flip',w);                    %trial_info(trial).explode_time=GetSecs-anchor;                    still_playing=0;                    WaitSecs(ITI);				                    trial_info(trial).trial_total=0;                    trial_info(trial).cumulative_total=cumulative_ctr;                    Screen('Flip',w);                else,                    % don't explode                    Screen('Flip',w);                    tmp_isi=1 + rand*isi_window;                    WaitSecs(tmp_isi);                    trial_counter=trial_counter+trial_info(trial).payoff_level;                    trial_round=trial_round+1;                end;            end;                                    %% save the whole environment            try,                  fprintf('saving %s\n',outfile);                  save(outfile);            catch,                 fprintf('datestamped filename too long - saving as %s_ic.mat',subject_initials);                 %outfile=sprintf('%s_balloon.mat',subject_initials);                 outfile=sprintf('b_%s_%02.0f-%02.0f.mat',date,d(4),d(5));                 save(outfile);            end;                                    %% end it if we get to the largest balloon            if trial_info(trial).exploded==0 & trial_round > nsizes,                cumulative_ctr=cumulative_ctr+trial_counter;                still_playing=0;    %           Screen('DrawText',w,sprintf('This Balloon: %0.2f',trial_counter),xcenter-140,ycenter+150,black);                Screen('DrawText',w,sprintf('Total:%5.f',cumulative_ctr),xcenter-150,ycenter+200,black);                trial_info(trial).finish_time=GetSecs-anchor;                trial_info(trial).trial_total=trial_counter;                trial_info(trial).cumulative_total=cumulative_ctr;                Screen('Flip',w);                WaitSecs(ITI);            end;            Screen('Flip',w);        end;        trial_info(trial).finished=1;        tmp_iti=exprnd(mean_iti);        while tmp_iti<min_iti | tmp_iti>max_iti,            tmp_iti=exprnd(mean_iti);        end;        trial_length=GetSecs-trial_start_time;        WaitSecs(tmp_iti);    end;    FlushEvents('keyDown');    KbQueueFlush;    Screen('DrawText',w,sprintf('Thank you for playing.'),xcenter-400,ycenter+200);    Screen('DrawText',w,sprintf( 'Your total was %5.f',cumulative_ctr),xcenter-400,ycenter-200);    Screen('Flip',w);    WaitSecs(3);    Screen('Flip',w);    GetChar; % wait for a keypress    Screen('CloseAll');    ShowCursor;    % save data to a file, with date/time stamp    d=clock;    outfile_final=sprintf('%s_r%d_%s_%02.0f-%02.0f_final.mat',subject_initials,run_number,date,d(4),d(5));    run_info.initials=subject_initials;    run_info.date=date;    run_info.outfile=outfile_final;    ShowCursor    try,          save(outfile_final);    catch,         fprintf('datestamped filename too long - saving as %s_ic.mat',subject_initials);         %outfile=sprintf('%s_balloon.mat',subject_initials);         outfile_too_long=sprintf('b_%s_%02.0f-%02.0f.mat',date,d(4),d(5));         save(outfile_too_long);    end;	              function seconds = waitForResponse(varargin)      %% sometimes we only want a specfic set of keys      if(~isempty(varargin))           usekeys=KbName(varargin{1});           % add escape to use keys if we say esc is okay           if(length(varargin)>1 && strcmp(varargin{2},'escok'))               usekeys=[usekeys KbName('ESCAPE')];               WaitSecs(.2); % just so we don't esc all the way through           end      else           usekeys=acceptableKeyPresses;      end            while(1)          [ keyIsDown, seconds, keyCode ] = KbCheck;                    if(keyIsDown)              if(any(keyCode(usekeys)))                   break;              elseif(keyCode(KbName('ESCAPE')) );                   msgAndCloseEverything(['Quit Early']);                  error('quit early\n')              %else, we don't care--keep looping              end          end                    WaitSecs(.001);      end      Screen('Flip', w); % change the screen so we don't hold down space      WaitSecs(.2);    end    function msgAndCloseEverything(message)       Priority(0); % set priority to normal        % send last message       DrawFormattedText(w, message,...           'center','center',black);       fprintf('%s\n',message)       Screen('Flip', w);       waitForResponse('space','escok');       closeEverything()    end    function closeEverything()       % close all files       diary off;	      %stop diary       fclose('all');	  %close data file       Screen('Close');   % kill screen       Screen('CloseAll');% all of them              ShowCursor;    % Retrun cursor       %ListenChar(0); % take keyboard input       sca;           % be sure screen is gone       return           end    end